////
/// Radius is used to smooth our components borders.
/// @group RADIUS
////

@use "../lib";
@use "breakpoints";
@use "../tokens/radius" as *;

/// Border radius map.  
/// <em style="font-size:small;">This variable is private.</em>
///
/// @prop {Number} 2xl [32px]
/// @prop {Number} xl [24px]
/// @prop {Number} l [20px]
/// @prop {Number} m [16px]
/// @prop {Number} s [12px]
/// @prop {Number} xs [8px]
/// @prop {Number} 2xs [4px]
///
/// @type Map
$_radiusMap: ();

/// List of allowed edges for border-radius
///
/// @type List
/// @access private
$_edges: (all, top, right, bottom, left);

/// List of allowed edges for border-radius.  
/// <em style="font-size:small;">This variable is private.</em>
/// 
/// @prop {String} all
/// @prop {String} top
/// @prop {String} right
/// @prop {String} bottom
/// @prop {String} left
///
/// @type List
$_edgesList: ();

/// Returns the radius value from map $radius
///
/// @param {String} $size - Size of radius
/// @return {String} Representation of radius size
/// @throw {Error}
/// @access private
@function _radius($size) {
  @return lib.rem(lib.get($radius, $size));
}

/// Includes border-radius by size and edge.
///
/// @param {String} $size - Name of the size
/// @param {String} $edge [all] - Edge to apply the border-radius
///
/// @output `border-radius` property.
///
/// @example scss - Set radius to all edges
///   .element {
///     @include radius(s);
///   }
/// @example scss - Set radius only on bottom right and bottom left edges
///   .element {
///     @include radius(l, bottom);
///   }
///
/// @throw Error if `$edge` in input is not present in `$_edgesList`
/// @access public
@mixin radius($size, $edge: all) {
  @if index($_edges, $edge) {
    @if $edge == top {
      border-radius: _radius($size) _radius($size) 0 0;
    } @else if $edge == right {
      border-radius: 0 _radius($size) _radius($size) 0;
    } @else if $edge == bottom {
      border-radius: 0 0 _radius($size) _radius($size);
    } @else if $edge == left {
      border-radius: _radius($size) 0 0 _radius($size);
    } @else {
      border-radius: _radius($size);
    }
  } @else {
    @error "Edge `#{$edge}` is not present in map `$_edges`";
  }
}

/// Create atom classes for all radius in $radius map
///
/// @alias createAtoms
/// @access public
@mixin createAtoms() {
  @each $size, $_ in $radius {
    .radius-#{$size} {
      @include radius($size);
    }
  }
}
