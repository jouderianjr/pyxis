// Spacings are part of a predefined set of negative space used in Pyxis.

@use "../lib";
@use "breakpoints";
@use "../tokens/spacings" as *;

// Includes the size contained in the spacings map with base breakpoint
//
// @param {String} $size - Name of the size
// @throw {Error}
@function spacing($size) {
  @return lib.rem(lib.get($spacings, $size, base));
}

// Includes the size contained in the spacings map on property in every breakpoints
//
// @param {String} $property - Name of the property
// @param {String | Number} $size - Name of the size or 0 value
// @throw {Error}
@mixin _responsiveSpacing($property, $size) {
  @if $size == 0 {
    #{$property}: 0;
  } @else {
    @each $breakpoint, $space in lib.get($spacings, $size) {
      @include breakpoints.mq($breakpoint) {
        #{$property}: lib.rem($space);
      }
    }
  }
}

// Includes equal padding by size in every breakpoints.
//
// @param {String} $size - A size from `$spacings`
@mixin padding($size) {
  @include _responsiveSpacing("padding", $size);
}

// Includes padding by size for vertical edges in every breakpoints.
//
// @param {String} $size - A size from `$spacings`
@mixin verticalPadding($size) {
  @include _responsiveSpacing("padding-bottom", $size);
  @include _responsiveSpacing("padding-top", $size);
}

// Includes padding by size for horizontal edges in every breakpoints.
//
// @param {String} $size - A size from `$spacings`
@mixin horizontalPadding($size) {
  @include _responsiveSpacing("padding-left", $size);
  @include _responsiveSpacing("padding-right", $size);
}

// Includes `margin-bottom` by size in every breakpoint.
//
// @param {String} $size - A size from `$spacings`
@mixin verticalSpacing($size) {
  @include _responsiveSpacing("margin-bottom", $size);

  &:last-child {
    margin-bottom: 0;
  }
}

// Includes `margin-right` by size in every breakpoints.
//
// @param {String} $size - A size from `$spacings`
@mixin horizontalSpacing($size) {
  @include _responsiveSpacing("margin-right", $size);

  &:last-child {
    margin-right: 0;
  }
}

// Includes `grid-row-gap` by size in every breakpoints
// Same as `verticalSpacing()`, but used to space out vertical elements
// in case a grid is used (`display: grid;`).
//
// @param {String} $size - A size from `$spacings`
@mixin rowGap($size) {
  @include _responsiveSpacing("row-gap", $size);
}

// Includes `grid-column-gap` by size in every breakpoints
// Like `horizontalSpacing()`, but used to space out horizontal elements
// in case a grid is used (`display: grid;`).
//
// @param {String} $size - A size from `$spacings`
@mixin columnGap($size) {
  @include _responsiveSpacing("column-gap", $size);
}

// Create atom classes for all spacing in $spacings map
@mixin createAtoms() {
  @each $size, $_ in $spacings {
    .padding-#{$size} {
      @include padding($size);
    }

    .padding-h-#{$size} {
      @include horizontalPadding($size);
    }

    .padding-v-#{$size} {
      @include verticalPadding($size);
    }

    .spacing-v-#{$size} {
      @include verticalSpacing($size);
    }

    .spacing-h-#{$size} {
      @include horizontalSpacing($size);
    }

    .row-gap-#{$size} {
      @include rowGap($size);
    }

    .column-gap-#{$size} {
      @include columnGap($size);
    }
  }
}
