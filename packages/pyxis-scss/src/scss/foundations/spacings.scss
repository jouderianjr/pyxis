// Spacings are part of a predefined set of negative space used in Pyxis.

@use "../lib";
@use "breakpoints";
@use "../tokens/spacings" as *;

// Includes the size contained in the spacings map with base breakpoint
//
// @param {String | List} $size - Name of the size
// @throw {Error}
@function spacing($size) {

  @if(type-of($size) == list) {
    $computedSize: null;
    @each $s in $size {
      $computedSize: #{$computedSize} #{if($s == 0, 0, lib.rem(lib.get($spacings, $s)))};
    }
    @return $computedSize;
  }

  @if($size == 0) {
    @return 0;
  }

  @return lib.rem(lib.get($spacings, $size));
}

// Includes the size contained in the spacings map on property in every breakpoints
//
// @param {String} $property - Name of the property
// @param {String | Number} $size - Name of the size or 0 value
// @throw {Error}
@mixin responsiveSpacing($property, $fromBase, $fromXxSmall: null, $fromXSmall: null, $fromSmall: null, $fromMedium: null, $fromLarge: null, $fromXLarge: null) {
  $sizes: (
    xxsmall: $fromXxSmall,
    xsmall: $fromXSmall,
    small: $fromSmall,
    medium: $fromMedium,
    large: $fromLarge,
    xlarge: $fromXLarge,
  );

  #{$property}: spacing($fromBase);

  @each $bp, $size in $sizes {
    @if ($size) {
      @include breakpoints.mq($bp) {
        #{$property}:  spacing($size);
      }
    }
  }
}

// Create atom classes for all spacing in $spacings map
@mixin createAtoms() {
  $directions: (top, bottom, left, right);

  @each $size, $_ in $spacings {

    .padding-#{$size} {
      padding: spacing($size);
    }

    .margin-#{$size} {
      margin: spacing($size);
    }

    .padding-h-#{$size} {
      padding-left: spacing($size);
      padding-right: spacing($size);
    }

    .padding-v-#{$size} {
      padding-bottom: spacing($size);
      padding-top: spacing($size);
    }

    .margin-h-#{$size} {
      margin-left: spacing($size);
      margin-right: spacing($size);
    }

    .margin-v-#{$size} {
      margin-bottom: spacing($size);
      margin-top: spacing($size);
    }

    @each $direction in $directions {
      .padding-#{str-slice($direction, 0, 1)}-#{$size} {
        padding-#{$direction}: spacing($size);
      }

      .margin-#{str-slice($direction, 0, 1)}-#{$size} {
        margin-#{$direction}: spacing($size);
      }
    }

    .space-h-#{$size} {
      margin-right: spacing($size);

      &:last-child {
        margin-right: 0;
      }
    }

    .space-v-#{$size} {
      margin-bottom: spacing($size);

      &:last-child {
        margin-bottom: 0;
      }
    }

    .row-gap-#{$size} {
      row-gap: spacing($size);
    }

    .column-gap-#{$size} {
      column-gap: spacing($size);
    }
  }
}


