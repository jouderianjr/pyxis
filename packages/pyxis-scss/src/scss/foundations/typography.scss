////
/// Typography defines all fonts-related rules.
///
/// @group TYPOGRAPHY
////

@use "../config";
@use "../lib";
@use "../tokens/textSizes" as *;
@use "../tokens/textWeights" as *;
@use "../tokens/titleSizes" as *;
@use "../tokens/titleWeights" as *;
@use "breakpoints";
@use "sass:math";
@use "sass:map";

/// The font path
///
/// @type String
/// @access private
$_fontPath: "https://d3be8952cnveif.cloudfront.net/fonts";

/// The font setting map
/// The `ss08` featureSettings allows to make numbers tall as uppercase letters
///
/// @type Map
/// @access private
$_font: (
  name: "CircularXXWeb",
  fallback: "Arial, sans-serif",
  featureSettings: "ss08" on,
  weights: (
    light: 200,
    book: 400,
    bold: 700,
  ),
);

/// The letter-spacing map
///
/// @type Map
/// @access private
$_letterSpacing: (
  base: 0,
  small: 0.1px,
  medium: 0.3px,
);

/// Returns a font-family with name and fallback
///
/// @param {Map} $font - The font settings
/// @return {String} - A font-family value
/// @throw {Error}
/// @access private
@function _fontFamily($font) {
  @return #{lib.get($font, name), lib.get($font, fallback)};
}

/// Returns a line-height by `$fontSize`
///
/// @param {Number} $fontSize - The font-size to apply the line-height to
/// @return {Number} - A line-height represented in percentage
/// @throw {Error}
/// @access private
@function _lineHeight($fontSize) {
  $shouldUseBaseLineHeight: lib.stripUnit($fontSize) >= 32;
  $baseToRem: lib.rem(math.floor($fontSize * 1.5));
  $goldenToRem: lib.rem(math.floor($fontSize * 1.618));

  @return if($shouldUseBaseLineHeight, $baseToRem, $goldenToRem);
}

/// Returns a letter-spacing by `$fontSize`
///
/// @param {Number} $fontSize - The font-size to apply the letter-spacing to
/// @return {Number} - A letter-spacing represented in rem
/// @throw {Error}
/// @access private
@function _letterSpacing($fontSize) {
  $shouldUseBaseLetterSpacing: lib.stripUnit($fontSize) >= 16;
  $shouldUseSmallLetterSpacing: lib.stripUnit($fontSize) >= 14;

  @if ($shouldUseBaseLetterSpacing) {
    @return lib.rem(lib.get($_letterSpacing, base));
  } @else {
    @return if(
      $shouldUseSmallLetterSpacing,
      lib.rem(lib.get($_letterSpacing, small)),
      lib.rem(lib.get($_letterSpacing, medium))
    );
  }
}

/// Base setting for Pyxis typography.
/// It has to be used only in the html tag.
///
/// @alias typographyGlobalSettings
/// @access public
@mixin globalSettings() {
  @include _fontWeight(book);
  font-family: _fontFamily($_font);
  font-feature-settings: lib.get($_font, featureSettings);
  font-size: config.$fontSizeRoot;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-variant-ligatures: none;
  line-height: _lineHeight(config.$fontSizeRoot);
  text-rendering: optimizeLegibility;
}

/// Include the font-weight value by name.
///
/// @param {String} $weight - The name of the weight
/// @throw {Error}
/// @access private
@mixin _fontWeight($weight) {
  font-weight: #{lib.get($_font, weights, $weight)};
}

/// Includes the properties contained in the typography map for every breakpoint
///
/// @param {Map} $fontSizes - The map of fontSize
/// @param {String} $size - The name of the size
/// @throw {Error}
/// @access private
@mixin _size($fontSizes, $size) {
  @each $breakpoint, $value in lib.get($fontSizes, $size) {
    @include breakpoints.mq($breakpoint) {
      $fontSize: lib.get($fontSizes, $size, $breakpoint);

      font-size: lib.rem($fontSize);
      letter-spacing: _letterSpacing($fontSize);
      line-height: _lineHeight($fontSize);
    }
  }
}

/// Include the responsive title size by name available in `$titleSizes`.
///
/// @param {String} $size - The name of the size
/// @param {String} $weight - The name of the weight
///
/// @output Appropriate `font-size`, `letter-spacing`, `line-height`
/// and `font-weight` for each breakpoint.
///
/// @example scss - Title of XL size
/// .title {
///  @include title(xl, bold)
/// }
/// @example scss - Bold title of M size
/// .title {
///  @include title(m, bold)
/// }
///
/// @throw Error if font-weight `$weight` in input is not allowed in titles
/// @access public
@mixin title($size, $weight) {
  @include _size($titleSizes, $size);

  @if map.has-key($titleWeights, $weight) {
    @include _fontWeight($weight);
  } @else {
    @error "Font-weight `#{$weight}` is not allowed in titles";
  }
}

/// Include the responsive text size by name available in `$textSizes`.
///
/// @param {String} $size - The name of the size:
/// @param {String} $weight - The name of the weight
///
/// @output Appropriate `font-size`, `letter-spacing`, `line-height`
/// and `font-weight` for each breakpoint.
///
/// @example scss - Text of L size
///   .text {
///     @include text(l, bold)
///   }
/// @example scss - Light text of M size
///   .text {
///     @include text(m, bold)
///   }
///
/// @access public
@mixin text($size, $weight) {
  @include _fontWeight($weight);
  @include _size($textSizes, $size);
}

/// Create `@font-face` for all fonts available in `$_fonts` map.
///
/// @access public
@mixin fontFaces() {
  @each $name, $weight in lib.get($_font, weights) {
    $fileName: #{lib.get($_font, name)}-#{lib.capitalize($name)};

    @font-face {
      font-display: config.$fontDisplay;
      font-family: lib.get($_font, name);
      font-style: normal;
      font-weight: $weight;
      src: url("#{$_fontPath}/#{$fileName}.woff") format("woff"),
        url("#{$_fontPath}/#{$fileName}.woff2") format("woff2");
    }
  }
}

/// Create atom classes for all title and text variant
///
/// @alias createAtoms
/// @access public
@mixin createAtoms() {
  @each $size, $_ in $titleSizes {
    @each $weight, $_ in $titleWeights {
      .title-#{lib.camelToKebabCase($size)}-#{$weight} {
        @include title($size, $weight);
      }
    }
  }

  @each $size, $_ in $textSizes {
    @each $weight, $_ in $textWeights {
      .text-#{lib.camelToKebabCase($size)}-#{$weight} {
        @include text($size, $weight);
      }
    }
  }
}

/// Generate @font-face
@include fontFaces();