@use "../foundations";
@use "mixins";

// Allowed sizes of modals
$_sizes: (small, medium, large);

// Allowed sizes of modals depending on breakpoints
$_sizesOnBp: (
  xsmall: foundations.rem(500px),
  medium: foundations.rem(800px),
  large: foundations.rem(1000px),
);

.modal-backdrop {
  @include mixins.backdrop;
  align-items: end;
  display: grid;
  justify-items: center;

  @include foundations.mq(xsmall) {
    align-items: start;
  }
}

.modal-close {
  @include foundations.absolute;
}

.modal {
  $minHeight: foundations.rem(200px);
  $offset: foundations.rem(80px);

  display: grid;

  @include foundations.mq(base, xsmall) {
    @include mixins.bottomSheet($minHeight);
  }

  @include foundations.mq(xsmall) {
    @include foundations.radius(xl);
    background-color: foundations.color(neutralLight);
    height: min-content;
    margin: $offset 0;
    min-height: $minHeight;
    opacity: 0;
    transform: scale(0.9) translateY(10%);
    transition-duration: foundations.duration(base);
    transition-property: opacity, transform;
    transition-timing-function: foundations.timing(entrance);
    width: 100%;
    will-change: opacity, transform;
  }

  .modal-backdrop--show & {
    transform: translateY(0);

    @include foundations.mq(xsmall) {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }
}

// Generate size classes
@each $size in $_sizes {
  .modal--#{$size} {
    @each $bp, $value in $_sizesOnBp {
      @if foundations.isLowerOrEqualTo($bp, $size) {
        @include foundations.mq($bp) {
          max-width: $value;
        }
      }
    }
  }
}

.modal--center {
  @include foundations.mq(xsmall) {
    place-self: center;
  }
}

.modal__header {
  @include foundations.radius(xl, top);
  @include foundations.responsiveSpacing("padding", m m xs, $fromXSmall: 2xl 2xl s);
  background: foundations.color(neutralLight);
  column-gap: foundations.spacing(xs);
  display: grid;
  grid-template-columns: auto max-content;
  height: fit-content;
  z-index: 1;

  @include foundations.mq(base, xsmall) {
    @include foundations.sticky;
  }
}

.modal__header__wrapper {
  align-items: center;
  column-gap: foundations.spacing(s);
  display: grid;
  grid-template-areas: "badge badge";
  justify-content: start;
  justify-items: start;
  row-gap: foundations.spacing(2xs);
}

.modal__header__badge {
  grid-area: badge;
}

.modal__header__title {
  @include foundations.title(s, bold);
}

.modal__content {
  @include foundations.responsiveSpacing("padding", 3xs m xs, $fromXSmall: 0 2xl);
}

.modal__footer {
  @include foundations.responsiveSpacing("padding", m, $fromXSmall: m 2xl);
  @include foundations.responsiveSpacing("gap", xs, $fromXSmall: s);
  align-items: center;
  background: foundations.color(neutralLight);
  display: grid;
  grid-auto-flow: column;
  z-index: 1;

  @include foundations.mq(base, xsmall) {
    @include foundations.sticky;
  }

  @include foundations.mq(xsmall) {
    @include foundations.radius(xl, bottom);
  }
}

.modal__footer--alt {
  background-color: foundations.color(neutralBase);
  color: foundations.color(neutralLight);
  margin-top: foundations.spacing(l);
}

.modal__footer__text {
  flex: 1;
}

.modal__footer__buttons {
  @include foundations.responsiveSpacing("gap", xs, $fromXSmall: s);
  align-items: center;
  display: grid;
  gap: foundations.spacing(xs);
  grid-auto-flow: column;
  height: fit-content;
  justify-content: flex-end;
  width: 100%;
}

.modal__footer__buttons--full-width {
  @include foundations.mq(base, xsmall) {
    grid-auto-flow: row;
    grid-template-columns: 1fr;
  }
}

.modal__header--sticky,
.modal__footer--sticky {
  @include foundations.sticky;
}

.modal__header__wrapper--custom,
.modal__footer--custom {
  align-items: unset;
  gap: unset;
  grid-template-areas: none;
  justify-content: unset;
  justify-items: unset;
}
