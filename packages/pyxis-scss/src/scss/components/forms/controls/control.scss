////
/// Generated classes for control field styling.
/// @group COMPONENTS
////

@use "../../../foundations";
@use "../../../lib";
@use "../mixins";
@use "../variables";

$_transitionTiming: 0.2s cubic-bezier(0.3, 0.07, 0.34, 1);

/// Set general properties for control fields as radio and checkbox.
///
/// @example scss - Grouped control field - Horizontal layout (default)
///    <div class="form-control-group">
///      <label class="form-control">
///        <input />
///        Option
///      </label>
///      <label class="form-control">
///        <input />
///        Option
///      </label>
///    </div>
///
/// @example scss - Grouped control field - Vertical layout
///    <div class="form-control-group form-control-group--column">
///      <label class="form-control">
///        <input />
///        Option
///      </label>
///      <label class="form-control">
///        <input />
///        Option
///      </label>
///    </div>
///
/// @example scss - Control field with error
///    <div class="form-control-group">
///      <label class="form-control form-control--error">
///        <input />
///        Option
///      </label>
///      <div class="form-control-group__error-message">Error message</div>
///    </div>
///
/// @example scss - Disabled control field
///    <div class="form-control-group">
///      // Please note that adding `form-control--disabled` is mandatory for a correct interaction.
///      <label class="form-control form-control--disabled">
///        <input disabled />
///        Control
///      </label>
///    </div>
///
/// @access public
.form-control {
  @include foundations.columnGap(xs);
  @include foundations.text(m, book);
  align-items: center;
  color: foundations.color(neutral25);
  cursor: pointer;
  display: grid;
  grid-template-columns: variables.$controlSize auto;
  position: relative;
  user-select: none;
}

.form-control--disabled {
  color: foundations.color(neutral50);
  cursor: not-allowed;
}

.form-control-group {
  @include foundations.columnGap(l);
  display: grid;
  grid-auto-flow: column;
  justify-content: start;
  position: relative;
}

.form-control-group--column {
  @include foundations.rowGap(xs);
  grid-auto-flow: row;
}

.form-control-group__error-message {
  $gap: lib.rem(2px);

  @include mixins.fieldErrorMessage;
  left: 0;
  top: calc(100% + #{$gap});
}
