@use "../../../lib";
@use "../../../foundations";
@use "../mixins";
@use "../variables";

// Add the same color and border-color to element.
//
// @param {Color} $color - Color name
@mixin _addonColors($color) {
  border-color: foundations.color($color);
  color: foundations.color($color);
}

.form-field {
  @include foundations.radius(xs);
  @include foundations.text(m, book);
  @include mixins.fieldStateDefault;
  background-color: foundations.color(neutralLight);
  border: variables.$borderWidth solid foundations.color(neutral85);
  color: foundations.color(neutralBase);
  cursor: text;
  position: relative;
  width: 100%;
}

.form-field--with-select-dropdown {
  cursor: pointer;
}

.form-field--disabled {
  @include mixins.fieldStateDisable;
}

.form-field--error {
  @include mixins.fieldStateError;
}

.form-field--with-opened-dropdown {
  @include mixins.fieldWithOpenedDropdown;
}

.form-field__wrapper {
  cursor: inherit;
  display: flex;
  height: 100%;

  .form-field--with-opened-dropdown & {
    position: relative;
    z-index: 2;
  }
}

.form-field__addon {
  align-items: center;
  color: foundations.color(neutral25);
  display: flex;
  flex: 1;
  justify-content: center;
  pointer-events: none;
  transition: transform foundations.duration(fast) foundations.timing(base);
  user-select: none;

  &:focus,
  &:focus-visible {
    outline: none;
  }

  .form-field--with-prepend-text &,
  .form-field--with-append-text & {
    @include foundations.horizontalPadding(2xs);
    transition-duration: foundations.duration(fast);
    transition-property: border-color, color;
    transition-timing-function: foundations.timing(base);
    white-space: nowrap;
  }

  .form-field--with-prepend-text & {
    border-right: lib.rem(1px) solid foundations.color(neutral85);
  }

  .form-field--with-append-text & {
    border-left: lib.rem(1px) solid foundations.color(neutral85);
  }

  .form-field--with-select-dropdown.form-field--with-opened-dropdown & {
    transform: rotate(180deg);
  }

  .form-field__autocomplete--filled ~ & {
    pointer-events: all;
  }

  .form-field:focus-within &,
  .form-field:hover & {
    @include _addonColors(actionBase);
  }

  .form-field.form-field--disabled & {
    @include _addonColors(neutral75);
  }

  .form-field.form-field--error & {
    @include _addonColors(errorBase);
  }

  .form-field__select--native + & {
    bottom: 0;
    position: absolute;
    right: 0;
    top: 0;
    width: variables.$fieldHeight;
  }

  .form-field__select--native.form-field__select--small + & {
    width: variables.$fieldHeightSmall;
  }
}

.form-field__addon__reset {
  $size: lib.rem(28px);

  @include foundations.radius(xl);
  background-color: foundations.color(neutral95);
  color: foundations.color(neutralBase);
  cursor: pointer;
  display: grid;
  height: $size;
  place-items: center;
  position: absolute;
  transition: background-color foundations.duration(fast) foundations.timing(base);
  width: $size;

  &:hover {
    background-color: foundations.color(neutral85);
  }

  &:focus-visible {
    box-shadow: 0 0 0 variables.$borderWidth rgba(foundations.color(actionBase), 0.8);
    outline: none;
  }
}

.form-field__addon__reset--small {
  $size: lib.rem(24px);

  height: $size;
  width: $size;
}
