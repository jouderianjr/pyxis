@use "../../foundations";
@use "variables";

// Add CSS rules for default, hover and focus field states.
@mixin fieldStateDefault {
  outline: transparent solid variables.$outlineWidth;
  outline-offset: 0;
  transition-duration: foundations.duration(fast);
  transition-property: border-color, outline-color;
  transition-timing-function: foundations.timing(base);

  @include foundations.onSafari {
    @include shadow(transparent);
  }

  &:focus,
  &:focus-within,
  &:hover:not(&--disabled, &--error, :disabled, [disabled], :checked) {
    border-color: foundations.color(actionBase);
  }

  &:focus,
  &:focus-within {
    outline-color: rgba(foundations.color(actionBase), 0.2);

    @include foundations.onSafari {
      @include shadow(rgba(foundations.color(actionBase), 0.2));
    }
  }
}

// Add CSS rules for disabled field state.
@mixin fieldStateDisable {
  background-color: foundations.color(neutral95);
  border-color: foundations.color(neutral85);
  color: foundations.color(neutral75);
  cursor: not-allowed;
}

// Add CSS rules for error field state.
@mixin fieldStateError {
  &,
  &:active,
  &:checked,
  &:focus,
  &:focus-within,
  &:hover:not(&--disabled, :disabled, [disabled]) {
    border-color: foundations.color(errorBase);
  }

  &:active,
  &:focus,
  &:focus-within {
    outline-color: rgba(foundations.color(errorBase), 0.2);

    @include foundations.onSafari {
      @include shadow(rgba(foundations.color(errorDark), 0.2));
    }
  }
}

// Add CSS rules for opened dropdown.
@mixin fieldWithOpenedDropdown {
  @include foundations.radius(xs, top);
  z-index: 2;

  &:focus,
  &:focus-within,
  &:active {
    outline-color: transparent;

    @include foundations.onSafari {
      @include shadow(transparent);
    }
  }
}

// Add CSS rules for error control state.
@mixin fieldControlError {
  @include fieldStateError;

  &:checked,
  &:checked:active {
    background-color: foundations.color(errorBase);
  }
}

// Add CSS rules for default control field.
@mixin controlDefault {
  $opticalOffset: foundations.rem(1px);

  border: variables.$borderWidth solid foundations.color(neutral85);
  cursor: pointer;
  height: variables.$controlSize;
  margin-top: $opticalOffset;
  outline-offset: 0;
  transition-duration: foundations.duration(fast);
  transition-property: background-color, border-color, box-shadow, outline-color;
  transition-timing-function: foundations.timing(base);
  width: variables.$controlSize;
  will-change: background-color, border-color, box-shadow, outline-color;

  &:checked {
    background-color: foundations.color(actionBase);
    border-color: foundations.color(actionBase);
  }

  &:active:not(:disabled, [disabled]) {
    border-color: foundations.color(actionDark);
    outline-color: rgba(foundations.color(actionDark), 0.2);

    @include foundations.onSafari {
      @include shadow(rgba(foundations.color(actionDark), 0.2));
    }

    &:checked {
      background-color: foundations.color(actionDark);
    }
  }

  &:disabled,
  &[disabled] {
    @include fieldStateDisable;
    box-shadow: none;
    outline: none;

    &:checked {
      border-color: foundations.color(neutral85);
    }
  }

  .form-control--error & {
    @include fieldControlError;
  }
}

// Add CSS rules for focus shadow
@mixin shadow($boxShadowColor) {
  box-shadow: 0 0 0 variables.$outlineWidth $boxShadowColor;
  outline: none;
}
