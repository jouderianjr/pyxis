@use "../foundations";
@use "../lib";
@use "mixins";
@use "sass:math";

$_borderWidth: lib.rem(2px);
$_outlineWidth: lib.rem(3px);

// Sizes of Pyxis' buttons.
// Each size has direct influence on properties in the sub-maps.
$_sizes: (
  huge: (
    columnGap: 2xs,
    dimension: lib.rem(50px),
    loaderSize: lib.rem(24px),
    minWidth: lib.rem(220px),
    padding: l,
    iconSpacing: l,
    radius: m,
    textSize: l,
  ),
  large: (
    columnGap: 2xs,
    dimension: lib.rem(40px),
    loaderSize: lib.rem(20px),
    minWidth: lib.rem(160px),
    padding: l,
    iconSpacing: s,
    radius: 2xl,
    textSize: l,
  ),
  medium: (
    columnGap: 3xs,
    dimension: lib.rem(30px),
    loaderSize: lib.rem(20px),
    minWidth: lib.rem(120px),
    padding: s,
    iconSpacing: xs,
    radius: 2xl,
    textSize: m,
  ),
  small: (
    columnGap: 3xs,
    dimension: lib.rem(24px),
    loaderSize: lib.rem(16px),
    minWidth: lib.rem(80px),
    padding: xs,
    iconSpacing: 2xs,
    radius: 2xl,
    textSize: s,
  )
);

// Set background and fill colors of loader
//
// @param {Color} $background - Value of background color
// @param {Color} $fill - Value of fill color
@mixin _loaderColors ($background, $fill) {
  border: $_borderWidth solid $background;
  border-top-color: $fill;
}

// Set properties for filled button types: primary and brand button.
//
// @param {String} $gradient - Gradient color used for background
// @param {String} $elevationColor - Name of color + opacity for elevation, i.e. `brand40`
@mixin _filled ($gradient, $elevationColor) {
  @include mixins.focus(actionBase);
  background-image: $gradient;
  background-position: 100% 0;
  background-size: 200%;
  color: foundations.color(neutralLight);

  &:hover {
    background-position: 0 100%;
  }

  &:disabled,
  &[disabled] {
    background: foundations.color(neutral85);
  }

  &.button--shadow {
    @include foundations.elevation(m, $elevationColor);

    &:hover,
    &:focus,
    &:active {
      @include foundations.elevation(s, $elevationColor);
    }

    &:disabled,
    &[disabled] {
      box-shadow: none;
    }
  }

  &.button--loading:after {
    @include _loaderColors(rgba(foundations.color(neutralLight), 0.15), foundations.color(neutralLight));
  }

  &.button--alt {
    @include mixins.focus(neutralLight);
    background: foundations.color(neutralLight);
    color: foundations.color(neutralBase);

    &:hover {
      color: foundations.color(actionBase);
    }

    &:disabled,
    &[disabled] {
      background: rgba(foundations.color(neutralLight), 0.4);
      color: rgba(foundations.color(neutralLight), 0.75);
    }

    &.button--shadow {
      box-shadow: none;
    }

    &.button--loading:after {
      @include _loaderColors(foundations.color(actionLight), foundations.color(actionBase));
    }
  }
}

// Set properties for outlined button types: secondary and tertiary button.
//
// @param {Color} $borderColor - Name of the color used as border
@mixin _outlined ($borderColor, $borderColorAlt) {
  @include mixins.focus(actionBase, true);
  border: $_borderWidth solid $borderColor;
  color: foundations.color(actionBase);

  &:hover {
    @include foundations.elevation(s, action15);
    border-color: foundations.color(actionBase);
  }

  &:disabled,
  &[disabled] {
    border-color: foundations.color(neutral85);
    box-shadow: none;
  }

  &.button--loading:after {
    @include _loaderColors(foundations.color(actionLight), foundations.color(actionBase));
  }

  &.button--alt {
    @include mixins.focus(neutralLight, true);
    border-color: $borderColorAlt;
    color: foundations.color(neutralLight);

    &:hover {
      background-color: rgba(foundations.color(neutralLight), 0.15);
      border-color: foundations.color(neutralLight);
      box-shadow: none;
    }

    &:disabled,
    &[disabled] {
      background-color: transparent;
      border-color: rgba(foundations.color(neutralLight), 0.4);
      color: rgba(foundations.color(neutralLight), 0.4);
    }

    &.button--loading:after {
      @include _loaderColors(rgba(foundations.color(neutralLight), 0.15), foundations.color(neutralLight));
    }
  }
}

.button {
  cursor: pointer;
  display: inline-grid;
  grid-auto-flow: column;
  justify-content: center;
  place-items: center;
  position: relative;
  transition-duration: foundations.duration(fast);
  transition-property: background, border-color, box-shadow, color, outline, transform;
  transition-timing-function: foundations.timing(base);
  user-select: none;
  will-change: background, border-color, box-shadow, color, outline, transform;

  &:active {
    transform: scale(0.97);
  }

  &:disabled,
  &[disabled] {
    color: foundations.color(neutral50);
    cursor: not-allowed;
  }
}

// Generate classes for sizing and set related properties
@each $size, $properties in $_sizes {
  .button--#{$size} {
    $dimension: lib.get($properties, dimension);
    $padding: lib.get($properties, padding);
    $iconSpacing: foundations.spacing(lib.get($properties, iconSpacing));

    @include foundations.columnGap(lib.get($properties, columnGap));
    @include foundations.text(lib.get($properties, textSize), bold);
    height: $dimension;

    &:before,
    &:not(.button--ghost) {
      @include foundations.radius(lib.get($properties, radius));
    }

    &:where(.button--huge):before {
      @include foundations.radius(l);
    }

    &:not(.button--ghost) {
      min-width: lib.get($properties, minWidth);
      padding: 0 foundations.spacing($padding);
    }

    &.button--append-icon {
      padding-right: $iconSpacing;
    }

    &.button--prepend-icon {
      padding-left: $iconSpacing;
    }

    &.button--icon-only {
      min-width: initial;
      padding: 0;
      width: $dimension;
    }

    &.button--loading:after {
      height: lib.get($properties, loaderSize);
      width: lib.get($properties, loaderSize);
    }
  }
}

.button--primary {
  $_endGradient: lighten(adjust-hue(foundations.color(actionDark), -4deg ), 16);
  @include _filled(linear-gradient(45deg, foundations.color(actionBase) 50%, $_endGradient), action40);
}

.button--brand {
  @include _filled(linear-gradient(45deg, foundations.color(brandDark) 50%, foundations.color(brandBase)), brand40);
}

.button--secondary {
  @include _outlined(foundations.color(actionBase), foundations.color(neutralLight));
}

.button--tertiary {
  @include _outlined(foundations.color(neutral85), rgba(foundations.color(neutralLight), 0.4));
}

.button--ghost {
  @include mixins.focus(actionBase, $radiusSize: 2xs);
  border-bottom: $_borderWidth solid transparent;
  color: foundations.color(actionBase);
  padding-top: foundations.spacing(4xs);

  &:hover:not(:disabled, [disabled]) {
    border-bottom-color: foundations.color(actionBase);
  }

  &:focus,
  &:before {
    border-radius: lib.rem(1px);
  }

  &.button--prepend-icon,
  &.button--append-icon {
    padding-left: 0;
    padding-right: 0;
  }

  &.button--alt {
    color: foundations.color(neutralLight);

    &:hover:not(:disabled, [disabled]) {
      border-bottom-color: foundations.color(neutralLight);
    }

    &:disabled,
    &[disabled] {
      color: rgba(foundations.color(neutralLight), 0.4);
    }
  }
}

.button.button--content-width {
  min-width: initial;
}

.button--loading,
.button--loading.button--alt {
  color: transparent;
  pointer-events: none;
  position: relative;

  &:after {
    animation: loading foundations.duration(slowest) infinite linear,
      loadingEntry foundations.duration(fast) foundations.timing(base);
    border-radius: 50%;
    content: "";
    left: 50%;
    position: absolute;
    top: 50%;
  }

  @keyframes loading {
    0% {
      transform: translate(-50%, -50%) rotate(0deg);
    }
    100% {
      transform: translate(-50%, -50%) rotate(360deg);
    }
  }

  @keyframes loadingEntry {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }
}


