import fs from 'fs'
import path from 'path'
import glob from 'glob'

const pathToConstructor = (filename:string):string => kebabToPascalCase(path.basename(filename, '.svg'));
const pathToMethod = (filename:string):string => kebabToCamelCase(path.basename(filename, '.svg'));
const readSvg = (filename:string):string => fs.readFileSync(filename,'utf8').replace(/"/g, '\\"')
const writeSvg = (content:string): void => fs.writeFileSync(path.resolve(__dirname, '../src/Components/IconSet.elm'), content)

const capitalize = (str:string):string => {
    const [head, ...slices] = str.split('');
    return [head.toUpperCase(), ...slices].join('');
};

const kebabToCamelCase = (str:string):string => str
    .split('-')
    .map((s, index) => (index !== 0 ? capitalize(s) : s))
    .join('');

export const kebabToPascalCase = (str: string): string => str
    .split('-')
    .map((s) => capitalize(s))
    .join('');

const getUnionType = (icons: string[]):string =>
`
type Icon =
    ${icons.map(filename => pathToConstructor(filename)).join('\n     | ')}`


const getToStringMethodTemplate = (icons: string[]):string =>
`
toString : Icon -> String
toString icon =
    case icon of
        ${icons.map(filename => `\n    ${pathToConstructor(filename)} -> ${pathToMethod(filename)}\n`).join('')}
`

const getToLabelMethodTemplate = (icons: string[]):string =>
    `
toLabel : Icon -> String
toLabel icon =
    case icon of
        ${icons.map(filename => `\n    ${pathToConstructor(filename)} -> "${path.basename(filename, '.svg')}"\n`).join('')}
`

const getAllIconsMethodTemplate = (icons: string[]): string =>
`
allIcons : List Icon 
allIcons = 
    [${icons.map(filename => pathToConstructor(filename)).join(', ')}]
`

const getConstructorMethodTemplate = (filename: string):string =>
`
${pathToMethod(filename)} : String
${pathToMethod(filename)} =
    "${readSvg(filename)}"`

const createIconSet = ():void => {
    const icons:string[] = glob.sync(path.resolve(__dirname, '../../pyxis-icons/**.svg'))

    writeSvg(
`module Components.IconSet exposing(Icon(..), toLabel, toString, allIcons)

{-| Warning. Do not edit this file which is autogenerated by scripts/generateIcons.ts -}

${getUnionType(icons)}

${getToStringMethodTemplate(icons)}

${getToLabelMethodTemplate(icons)}

${getAllIconsMethodTemplate(icons)}

${icons.map(getConstructorMethodTemplate).join('\n')}
`
    )
}


createIconSet()
