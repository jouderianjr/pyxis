#!/usr/bin/env bash

#############################################################################
#                                                                           #
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN     #
#                                                                           #
#############################################################################

# script exit when a command fails
set -o errexit
# catch a command error in pipe execution
set -o pipefail
# exit when try to use undeclared variables
# set -o nounset
# print and expand each command to stdout before executing it
set -o xtrace

if [ $# -eq 0 ]; then
  echo "Missing required argument: environment"
  exit 1
fi

export ENV=$1
export AWS_DEFAULT_REGION="eu-west-1"
export VERSION="${DRONE_TAG:-$DRONE_COMMIT_SHA}"
export PYXIS_BUILD_NAME="pyxis@${VERSION}"


function deploy_on_artifactory() {
  jfrog npmc --repo-deploy=pyxis-it --repo-resolve=pyxis --server-id-deploy=Default-Server --server-id-deploy=Default-Server
  jfrog npm publish --build-name=${PYXIS_BUILD_NAME} --build-number=${VERSION} --registry=http://prima.jfrog.io:8081/artifactory/api/npm/pyxis/
  jfrog rt bp ${PYXIS_BUILD_NAME} ${VERSION}
}

# Check if artifact exists for current branch
if aws s3 ls s3://prima-artifacts-encrypted/microservices/pyxis/"${VERSION}-${ENV}".tar.gz >/dev/null; then
  echo "Artifact already exists!"
  exit 0
fi

if [ "$ENV" = "staging" ]; then
  yarn install
  yarn build
  yarn storybook:build
  yarn elmbook:build
  mkdir build
  mkdir build/react-staging
  mkdir build/elm-staging
  cp -R packages/pyxis-react/storybook-static/* build/react-staging
  cp -R packages/pyxis-elm/dist/* build/elm-staging
  tar czf "${VERSION}"-"${ENV}".tar.gz build

  ## Get the JFrog CLI
  ## More on Jfrog & npm: https://www.jfrog.com/confluence/display/JFROG/npm+Registry
  curl -fL https://getcli.jfrog.io | sh
  
  jfrog config add --interactive=false --url=https://prima.jfrog.io/api/npm/pyxis-it --user=${ARTIFACTORY_USER} --password=${ARTIFACTORY_APIKEY} 
  ## Set Artifactory as the default registry for @pyxis
  jfrog npm config set @pyxis:registry http://prima.jfrog.io:8081/artifactory/api/npm/pyxis-it/
  jfrog npm config set registry https://registry.npmjs.org/
  
  ## Create build and gather informations
  jfrog npm install --build-name=${PYXIS_BUILD_NAME} --build-number=${VERSION}
  jfrog rt bag ${PYXIS_BUILD_NAME} ${VERSION}
  
  ## Elm and Tokens packages will not be deployed on Artifactory.
  (cd packages/pyxis-scss && deploy_on_artifactory)
  (cd packages/pyxis-react && deploy_on_artifactory)
  (cd packages/pyxis-icons && deploy_on_artifactory)
fi

if [ "$ENV" = "production" ]; then
  yarn install
  yarn build
  yarn storybook:build
  yarn elmbook:build
  mkdir build
  mkdir build/react
  mkdir build/elm
  cp -R packages/pyxis-react/storybook-static/* build/react
  cp -R packages/pyxis-elm/dist/* build/elm
  tar czf "${VERSION}"-"${ENV}".tar.gz build
fi

aws --region="eu-west-1" s3 cp "${VERSION}"-"${ENV}".tar.gz s3://prima-artifacts-encrypted/microservices/pyxis/"${VERSION}"-"${ENV}".tar.gz
