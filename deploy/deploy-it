#!/usr/bin/env bash

#############################################################################
#                                                                           #
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN     #
#                                                                           #
#############################################################################

# script exit when a command fails
set -o errexit
# catch a command error in pipe execution
set -o pipefail
# exit when try to use undeclared variables
# set -o nounset
# print and expand each command to stdout before executing it
set -o xtrace

function wait_for_artifact() {
  echo -n "Waiting for artifact"
  while true; do
    if ! aws s3 ls s3://prima-artifacts-encrypted/microservices/pyxis/"${VERSION}"-"${ENV}".tar.gz; then
      echo -ne "."
      sleep 10
    else
      echo "Artifact ready!"
      exit 0
    fi
  done
}

function wait_for_cloudfront_purge() {
  local INVALIDATION=$1
  local DISTRIBUTION=$2

  set +x
  echo "Waiting for CloudFront to finish purging cache..."
  while true; do
    STATUS="$(aws cloudfront get-invalidation --id "$INVALIDATION" --distribution-id "$DISTRIBUTION" | jq -r .Invalidation.Status)"
    if [ "$STATUS" = "InProgress" ]; then
      echo -ne "."
      sleep 30
    else
      break
    fi
  done
}

if [ $# -eq 0 ]; then
  echo "Missing required argument: environment"
  exit 1
fi

export ENV=$1
export AWS_DEFAULT_REGION="eu-west-1"
export VERSION="${DRONE_TAG:-$DRONE_COMMIT_SHA}"

if [ "$2" = "--wait-for-artifact" ]; then
  wait_for_artifact
fi

if [ "${ENV}" = "staging" ]; then

  aws --region="eu-west-1" s3 cp s3://prima-artifacts-encrypted/microservices/pyxis/"${VERSION}"-"${ENV}".tar.gz .
  tar xzvf "${VERSION}"-"${ENV}".tar.gz
  aws --region="eu-west-1" s3 sync --acl public-read build s3://prima-design-staging

  INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id E2GEU5AL0FE7DW --paths "/*" | jq -r .Invalidation.Id)
  wait_for_cloudfront_purge "$INVALIDATION_ID" "E2GEU5AL0FE7DW"

  set +x
  echo "Purging cloudflare cache"
  curl --silent --show-error --fail -X POST -H "Content-Type:application/json" -H "Authorization: Bearer $CLOUDFLARE_TOKEN" \
    https://api.cloudflare.com/client/v4/zones/ae110665c7335b1a8318710ead4e263c/purge_cache \
    --data '{"prefixes":["react-staging.prima.design/","scss-staging.prima.design/"]}' | jq -e .success
  set -x
elif [ "${ENV}" = "production" ]; then

  aws --region="eu-west-1" s3 cp s3://prima-artifacts-encrypted/microservices/pyxis/"${VERSION}"-"${ENV}".tar.gz .
  tar xzvf "${VERSION}"-"${ENV}".tar.gz
  aws --region="eu-west-1" s3 sync --acl public-read build s3://prima-design-production

  INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id E3A3AUDPAH5M28 --paths "/*" | jq -r .Invalidation.Id)
  wait_for_cloudfront_purge "$INVALIDATION_ID" "E3A3AUDPAH5M28"

  set +x
  echo "Purging cloudflare cache"
  curl --silent --show-error --fail -X POST -H "Content-Type:application/json" -H "Authorization: Bearer $CLOUDFLARE_TOKEN" \
    https://api.cloudflare.com/client/v4/zones/ae110665c7335b1a8318710ead4e263c/purge_cache \
    --data '{"prefixes":["react.prima.design/","scss.prima.design/"]}' | jq -e .success
  set -x
else
  echo "${ENV} not supported!"
  exit 1
fi
